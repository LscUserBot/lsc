import os
import importlib.util
import re
import random
import string
import sqlite3
from pyrogram import Client, filters, idle
from pyrogram.types import Message
from pathlib import Path
import asyncio
import psutil
import sys
import os
import sys
import time
import subprocess
import requests
import pytz
import platform
from datetime import datetime

def check_user_file():
    if not os.path.exists("user.txt"):
        print("–§–∞–π–ª user.txt –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π...")
        api_id = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API ID: ")
        api_hash = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API HASH: ")
        
        with open("user.txt", "w") as f:
            f.write(f"{api_id}\n{api_hash}")
        return api_id, api_hash
    else:
        with open("user.txt", "r") as f:
            lines = f.readlines()
            return lines[0].strip(), lines[1].strip()
        
API_ID, API_HASH = check_user_file()

async def get_version():
    try:
        with open("version.txt", "r") as f:
            return f.read().strip()
    except:
        return "0.0"
    
async def check_version(app: Client, prefix: str):
    try:
        if not os.path.exists("version.txt"):
            error_msg = "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª version.txt! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É —é–∑–µ—Ä-–±–æ—Ç–∞!"
            print(error_msg)
            if app.is_initialized:
                await app.send_message("me", error_msg)
            return False

        with open("version.txt", "r") as f:
            local_version = f.read().strip()

        github_url = "https://raw.githubusercontent.com/ZeroUserBot/zero/main/version.txt"
        try:
            response = requests.get(github_url, timeout=10)
            response.raise_for_status()
            github_version = response.text.strip()

            if local_version < github_version:
                update_msg = (
                    f"üîÑ –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ!\n"
                    f"<blockquote><i>{local_version} ‚Üí {github_version}</i></blockquote>\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>{prefix}update</code>"
                )
                await app.send_message("me", update_msg)
                return github_version
            return True
        except requests.RequestException as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä—Å–∏–∏: {e}")
            return True
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ check_version: {e}")
        return True

def init_db():
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    
    cursor.execute('''CREATE TABLE IF NOT EXISTS settings
                     (prefix TEXT, allow TEXT)''')
    
    cursor.execute("SELECT * FROM settings")
    if not cursor.fetchone():
        cursor.execute("INSERT INTO settings VALUES (?, ?)", ('.', '[]'))
        conn.commit()
    
    conn.close()

def get_settings():
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    cursor.execute("SELECT prefix, allow FROM settings LIMIT 1")
    settings = cursor.fetchone()
    conn.close()
    return {
        'prefix': settings[0],
        'allow': eval(settings[1])
    }

def update_settings(prefix=None, allow=None):
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    
    if prefix is not None:
        cursor.execute("UPDATE settings SET prefix = ?", (prefix,))
    if allow is not None:
        cursor.execute("UPDATE settings SET allow = ?", (str(allow),))
    
    conn.commit()
    conn.close()

async def install_libraries(message, module_name, libs_str):
    libs = [lib.strip() for lib in libs_str.split(",")]
    total_libs = len(libs)
    installed_count = 0
    results = []
    
    msg = await message.reply("üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –±–∏–±–ª–∏–æ—Ç–µ–∫...")
    
    for lib in libs:
        try:
            try:
                importlib.import_module(lib)
                results.append(f"¬ª <code>{lib}</code> [‚úÖ –£–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞]")
                installed_count += 1
                continue
            except ImportError:
                pass
            
            message_parts = [
                f"‚ùóÔ∏è –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è <code>{module_name}</code> —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª–µ–¥—É—é—â–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫:",
                "<blockquote>" + "\n".join(results) + "\n",
                f"¬ª <code>{lib}</code> [üîÑ –£—Å—Ç–∞–Ω–æ–≤–∫–∞...]</blockquote>",
                "",
                f"<blockquote><i>üîÑ –ù–∞—á–∏–Ω–∞—é —É—Å—Ç–∞–Ω–æ–≤–∫—É –±–∏–±–ª–∏–æ—Ç–µ–∫! [{installed_count}/{total_libs}]</i></blockquote>"
            ]
            await msg.edit_text("\n".join(message_parts))
            
            process = await asyncio.create_subprocess_exec(
                sys.executable, "-m", "pip", "install", lib,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
            stdout, stderr = await process.communicate()
            
            if process.returncode == 0:
                results.append(f"¬ª <code>{lib}</code> [‚úÖ –£—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞]")
                installed_count += 1
            else:
                results.append(f"¬ª <code>{lib}</code> [‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏]")
                
        except Exception as e:
            results.append(f"¬ª <code>{lib}</code> [‚ùå –û—à–∏–±–∫–∞: {str(e)}]")
    
    if installed_count == total_libs:
        success_message = [
            f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫: <code>{', '.join(libs)}</code> —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
            f"<blockquote>üîÑ –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π –Ω—É–∂–Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ <code>{prefix}restart</code></blockquote>"
        ]
        await msg.edit_text("\n".join(success_message))
    else:
        error_message = [
            f"‚ùóÔ∏è –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è <code>{module_name}</code> —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª–µ–¥—É—é—â–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫:",
            "<blockquote>" + "\n".join(results) + "</blockquote>",
            "",
            "<i>–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ –±—ã–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–π –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Ö –≤—Ä—É—á–Ω—É—é.</i>"
        ]
        await msg.edit_text("\n".join(error_message))


init_db()
settings = get_settings()
prefix = settings['prefix']
allow = settings['allow']

app = Client(
    "zero",
    api_id=int(API_ID),
    api_hash=API_HASH,
    device_model="ZERO",
    app_version="1.0"
)

modules_help = {}
loaded_modules = {}
modules_info = {}

def generate_random_name(length=8):
    return ''.join(random.choice(string.ascii_lowercase + string.digits) for _ in range(length))

def load_modules():
    modules_dir = "modules"
    if not os.path.exists(modules_dir):
        os.makedirs(modules_dir)
        return

    modules_help.clear()
    loaded_modules.clear()
    modules_info.clear()
    
    for filename in os.listdir(modules_dir):
        if filename.endswith(".py"):
            module_name = filename[:-3]
            module_path = os.path.join(modules_dir, filename)
            
            try:
                meta_data = {
                    "name": module_name,
                    "developer": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
                    "description": "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è",
                    "img": None,
                    "hidden": False
                }
                
                with open(module_path, "r", encoding="utf-8") as f:
                    for line in f:
                        if line.startswith("#meta name:"):
                            meta_data["name"] = line.split(":", 1)[1].strip()
                        elif line.startswith("#meta developer:"):
                            meta_data["developer"] = line.split(":", 1)[1].strip()
                        elif line.startswith("#meta description:"):
                            meta_data["description"] = line.split(":", 1)[1].strip()
                        elif line.startswith("#meta img:"):
                            meta_data["img"] = line.split(":", 1)[1].strip()
                        elif line.startswith("#meta hidden:"):
                            meta_data["hidden"] = line.split(":", 1)[1].strip().lower() == "true"
                
                if meta_data["name"] in modules_info:
                    print(f"–ú–æ–¥—É–ª—å —Å –∏–º–µ–Ω–µ–º {meta_data['name']} —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º {filename}")
                    continue
                
                spec = importlib.util.spec_from_file_location(module_name, module_path)
                module = importlib.util.module_from_spec(spec)
                
                module.app = app
                module.prefix = prefix
                module.allow = allow
                module.modules_help = modules_help
                module.loaded_modules = loaded_modules
                module.modules_info = modules_info
                module.get_version = get_version
                module.check_version = check_version
                module.init_db = init_db
                module.get_settings = get_settings
                module.update_settings = update_settings
                module.generate_random_name = generate_random_name
                module.load_modules = load_modules
                module.install_libraries = install_libraries
                
                spec.loader.exec_module(module)
                
                loaded_modules[module_name] = module
                modules_info[meta_data["name"]] = {
                    "file_name": filename,
                    "path": module_path,
                    "developer": meta_data["developer"],
                    "description": meta_data["description"],
                    "img": meta_data["img"],
                    "hidden": meta_data["hidden"]
                }
                
                print(f"–ú–æ–¥—É–ª—å {meta_data['name']} –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞ {filename}")
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è {filename}: {e}")

async def authorize():
    try:
        print("üîß –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        await app.start()
        me = await app.get_me()
        print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ {me.first_name} (ID: {me.id})")
        version_status = await check_version(app, prefix) 
        if version_status is False:
            print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–µ—Ä—Å–∏–∏, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É")
            await app.stop()
            return

        if me.id not in allow:
            new_allow = allow.copy()
            new_allow.append(me.id)
            update_settings(allow=new_allow)
            globals()['allow'] = new_allow
            print(f"‚úÖ ID {me.id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
        return False

async def main():
    os.system('cls' if os.name == 'nt' else 'clear')

    if os.path.exists("update_info.txt"):
        try:
            async with app:
                with open("update_info.txt", "r") as f:
                    lines = f.readlines()
                    chat_id = int(lines[0].strip())
                    message_id = int(lines[1].strip())
                    old_version = lines[2].strip() if len(lines) > 2 else "0.0"

                new_version = await get_version()
                changes = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

                if os.path.exists("version_info.txt"):
                    with open("version_info.txt", "r", encoding="utf-8") as f:
                        v_lines = f.readlines()
                        if len(v_lines) >= 2 and v_lines[0].strip() == new_version:
                            changes = "\n".join(line.strip() for line in v_lines[1:]) or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

                message_text = (
                    f"‚úÖ –ë–æ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω —Å <code>{old_version}</code> –Ω–∞ <code>{new_version}</code>\n"
                    f"‚úèÔ∏è <blockquote><i>–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≤–µ—Ä—Å–∏–∏:\n{changes}</i></blockquote>"
                )
                await app.edit_message_text(chat_id, message_id, message_text)
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
        finally:
            if os.path.exists("update_info.txt"):
                os.remove("update_info.txt")
            if os.path.exists("version_info.txt"):
                os.remove("version_info.txt")

    from utils.start import print_start
    print_start()
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")

    if not await authorize():
        print("‚ö†Ô∏è –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é...")
        phone = input("üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ")
        try:
            async with app:
                sent_code = await app.send_code(phone)
                code = input("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ")
                await app.sign_in(phone, sent_code.phone_code_hash, code)
                me = await app.get_me()
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–∞–∫ {me.first_name}")
                if me.id not in allow:
                    new_allow = allow.copy()
                    new_allow.append(me.id)
                    update_settings(allow=new_allow)
                    globals()['allow'] = new_allow
                    print(f"‚úÖ ID {me.id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤")
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {str(e)}")
            return

    if os.path.exists("restart_info.txt"):
        with open("restart_info.txt", "r") as f:
            lines = f.readlines()
            chat_id = int(lines[0].strip())
            message_id = int(lines[1].strip())
        os.remove("restart_info.txt")
        try:
            async with app:
                await app.edit_message_text(chat_id, message_id, "‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω!")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    print("üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª–∏...")
    load_modules()
    if not modules_info:
        print("‚ö†Ô∏è –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π!")
    else:
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(modules_info)} –º–æ–¥—É–ª–µ–π")

    print("üü¢ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã...")
    try:
        me = await app.get_me()
        await app.send_message(me.id, '–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ: {e}")

    await idle()

if __name__ == "__main__":
    try:
        print("[LOG] –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        loop = asyncio.get_event_loop()
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        print("\n[INFO] –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        print(f"[ERROR] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        if app.is_connected:
            print("[INFO] –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")
            loop.run_until_complete(app.stop())
