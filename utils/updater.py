from utils.imports import *
from utils.func import *

def on_rm_error(func, path, exc_info):
    os.chmod(path, stat.S_IWRITE)
    func(path)

EXCLUDE_FILES = ['user.txt', 'database.db', 'lsc.session']
SKIP_FILES = ['changes.txt', 'README.md']

def get_version_changes(new_version):
    try:
        changes_url = "https://raw.githubusercontent.com/LscUserBot/lsc/main/changes.txt"    
        response = requests.get(changes_url)
        if response.status_code == 200:
            changes_text = response.text
            version_section = f"changes(version={new_version}):"

            if version_section in changes_text:
                start_idx = changes_text.index(version_section) + len(version_section)
                end_idx = changes_text.find("changes(version=", start_idx)
                if end_idx == -1:
                    return changes_text[start_idx:].strip()
                return changes_text[start_idx:end_idx].strip()
    except Exception:
        pass
    return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

def update_bot():
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
    temp_dir = "temp_update"

    try:
        if os.path.exists(temp_dir):
            print("üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...")
            shutil.rmtree(temp_dir, onerror=on_rm_error)

        print("‚è¨ –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...")
        Repo.clone_from("https://github.com/LscUserBot/lsc.git",  temp_dir)

        new_version = "0.0"
        version_file = os.path.join(temp_dir, "version.txt")
        if os.path.exists(version_file):
            with open(version_file, "r") as f:
                new_version = f.read().strip()

        print("üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")

        for root, dirs, files in os.walk(temp_dir):
            relative_path = os.path.relpath(root, temp_dir)
            dst_root = os.path.join('.', relative_path)

            if not os.path.exists(dst_root):
                os.makedirs(dst_root)

            for file in files:
                src_file = os.path.join(root, file)
                dst_file = os.path.join(dst_root, file)

                if file in SKIP_FILES:
                    print(f"üìé –ü—Ä–æ–ø—É—â–µ–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ñ–∞–π–ª: {file}")
                    continue

                if os.path.basename(dst_file) in EXCLUDE_FILES:
                    print(f"üìé –ü—Ä–æ–ø—É—â–µ–Ω –∑–∞—â–∏—â—ë–Ω–Ω—ã–π —Ñ–∞–π–ª: {dst_file}")
                    continue

                try:
                    print(f"üîÑ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: {src_file} ‚Üí {dst_file}")
                    shutil.copy2(src_file, dst_file)
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {src_file}: {e}")

        print("üì¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: requirements.txt")

        req_file = os.path.join(temp_dir, "requirements.txt")
        if os.path.exists(req_file):
            print("üîÑ –ù–∞–π–¥–µ–Ω requirements.txt ‚Äî —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
            try:
                subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", req_file])
                print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
            except subprocess.CalledProcessError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
        else:
            print("‚ö†Ô∏è –§–∞–π–ª requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
            print("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞!")

        print("üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        shutil.rmtree(temp_dir, onerror=on_rm_error)

        changes = get_version_changes(new_version)
        with open("version_info.txt", "w", encoding="utf-8") as f:
            f.write(f"{new_version}\n{changes}")

        print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
        time.sleep(2)

        python_exec = sys.executable
        script_path = os.path.abspath("lsc.py")
        subprocess.Popen([python_exec, script_path], start_new_session=True)
        sys.exit(0)

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
        if os.path.exists(temp_dir):
            try:
                shutil.rmtree(temp_dir, onerror=on_rm_error)
            except Exception as cleanup_error:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {cleanup_error}")
        sys.exit(1)

if __name__ == "__main__":
    update_bot()
